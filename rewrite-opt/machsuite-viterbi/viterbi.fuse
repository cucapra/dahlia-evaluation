// N_OBS: 140
// N_STATES: 64
// N_TOKENS 64

decor "#pragma SDS data copy(obs[0:140])"
decor "#pragma SDS data zero_copy(path[0:140])"

decl obs: bit<8>[140];
decl init: double[64];
decl transition: double[64][64];
decl emission: double[64][64];
decl path: bit<8>[140];

let llike: double[140][64];
let min_p: double = 0.0;
let p: double = 0.0;
let min_s: bit<8> = 0;

{
for (let s = 0..64) {
  llike[0][s] := init[s] + emission[s][obs[0]];
}
---
for (let t = 1..140) {
  for (let curr = 0..64) {
    min_p := llike[t-1][0] + transition[0][curr] + emission[curr][obs[t]];
    ---
    for (let prev = 1..64) {
      p := llike[t-1][prev] + transition[prev][curr] + emission[curr][obs[t]];
      if (p < min_p) {
        min_p := p;
      }
    }
    ---
    llike[t][curr] := min_p;
  }
}
---
min_p := llike[139][min_s];
---
for (let s = 1..64) {
  p := llike[139][s];
  if (p < min_p) {
    min_p := p;
    min_s := s;
  }
}
path[139] := min_s;
---
let t = 138;
let temp_t = 138;
while (t >= 0) {
  min_s := 0;
  temp_t := t;
  min_p := llike[t][min_s] + transition[min_s][path[t+1]];
  ---
  for (let s = 1..64) {
    p := llike[t][s] + transition[s][path[t+1]];
    if (p < min_p) {
      min_p := p;
      min_s := s;
    }
  }
  ---
  path[t] := min_s;
  t := temp_t - 1;
}
}
