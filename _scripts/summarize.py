#!/usr/bin/env python3

import json
import csv
import sys
import os
import argparse
import numpy as np

from collections import defaultdict, ChainMap

from benchmarking import common
from benchmarking.summary import summary_configs, summarize

OUT_CSV = 'summary.csv'
DEFAULT_CONFIG = [
    'routed_util',
    'default',
]

if __name__ == '__main__':
    common.logging_setup()
    parser = argparse.ArgumentParser(description='Summarize a results.json file generated by extraction script.')

    # JSON file for extra keys to be extracted.
    parser.add_argument('-k', '--keys',
                        help='JSON configuration extra keys to extract for this job.',
                        type=str, dest='key_conf')

    # Set of configurations to use
    parser.add_argument('-c', '--config', nargs='+', default = None,
                        help = 'Specify any number of space separated predefined configurations to use. Possible configurations: {}'.format(summary_configs.CONF_MAP.keys()))

    parser.add_argument('-R', '--no-runtime', action='store_true', default=False,
                        help='Extract fields from runtime.log')

    parser.add_argument('results')

    opts = parser.parse_args()

    confs = opts.config
    if confs is None:
        confs = DEFAULT_CONFIG

    common.logging.info('Using configurations: {}'.format(confs))

    conf_fields = [ summary_configs.parse_confs(conf).keys for conf in confs ]

    extra_keys = {}
    if opts.key_conf:
        with open(opts.key_conf, 'r') as f:
            extra_keys = json.load(f)

    fields = ChainMap(extra_keys, *conf_fields)

    summarize.summarize_json(opts.results, fields, not opts.no_runtime, OUT_CSV)
