decl C_interface: bit<32>[2];
decl orig_interface: bit<32>[32][32][16];
decl sol_interface: bit<32>[32][32][16];

let C: bit<32>{2}[2];
let orig:   bit<32>{2}[32 bank ::ORIG_D1::][32 bank ::ORIG_D2::][16 bank ::ORIG_D3::];
let sol:    bit<32>{2}[30 bank ::SOL_D1::][30 bank ::SOL_D2::][14 bank ::SOL_D3::];

// Arrays to store boundary cases.
let origi:  bit<32>{2}[2][32 bank ::ORIGI_D2::][16 bank ::ORIGI_D3::];
let origj:  bit<32>{2}[2][32 bank ::ORIGJ_D1::][16 bank ::ORIGJ_D3::];
let origk:  bit<32>{2}[2][32 bank ::ORIGK_D1::][32 bank ::ORIGK_D2::];
let soli:   bit<32>{2}[2][32 bank ::SOLI_D2::][16 bank ::SOLI_D3::];
let solj:   bit<32>{2}[2][32 bank ::SOLJ_D1::][16 bank ::SOLJ_D3::];
let solk:   bit<32>{2}[2][32 bank ::SOLK_D1::][32 bank ::SOLK_D2::];

view C_v = C[_: bank 1];

{
  {
    // Copy loops
    for (let i = 0..2){
      C_v[i] := C_interface[i];
    }
    ---
    view orig_v = orig[_: bank 1][_: bank 1][_:bank 1];
    for (let i = 1..31){
      for (let j = 1..31){
        for (let k = 1..15){
          orig_v[i-1][j-1][k-1] := orig_interface[i][j][k];
        }
      }
    }
    ---
    view origi_v =  origi [_: bank 1][_: bank 1][_: bank 1];
    for (let j = 0..32) {
      for (let k = 0..16) {
        origi_v[0][j][k] := orig_interface[0][j][k];
        ---
        origi_v[1][j][k] := orig_interface[31][j][k];
      }
    }
    ---
    view origj_v =  origj [_: bank 1][_: bank 1][_: bank 1];
    for (let i = 0..32){
      for (let k = 0..16){
        origj_v[0][i][k] := orig_interface[i][0][k];
        ---
        origj_v[1][i][k] := orig_interface[i][31][k];
      }
    }
    ---
    view origk_v =  origk [_: bank 1][_: bank 1][_: bank 1];
    for (let i = 0..32){
      for (let j = 0..32){
        origk_v[0][i][j] := orig_interface[i][j][0];
        ---
        origk_v[1][i][j] := orig_interface[i][j][15];
      }
    }
  }
  ---
  // Stencil computation
  view orig_u1 = orig[-1!: ][_  : ][_  : ];
  view orig_u2 = orig[1! : ][_  : ][_  : ];
  view orig_u3 = orig[_  : ][-1!: ][_  : ];
  view orig_u4 = orig[_  : ][1! : ][_  : ];
  view orig_u5 = orig[_  : ][_  : ][-1!: ];
  view orig_u6 = orig[_  : ][_  : ][1! : ];

  for (let i = 1..31) unroll ::UR_LOOP1:: {
    for (let j = 1..31) unroll ::UR_LOOP2:: {
      for (let k = 1..15) unroll ::UR_LOOP3:: {
        let temp1 = orig[i][j][k] * C[0];
        ---
        let temp2 = orig_u1[i][j][k] * C[1] + temp1;
        ---
        let temp3 = orig_u2[i][j][k] * C[1] + temp2;
        ---
        let temp4 = orig_u3[i][j][k] * C[1] + temp3;
        ---
        let temp5 = orig_u4[i][j][k] * C[1] + temp4;
        ---
        let temp6 = orig_u5[i][j][k] * C[1] + temp5;
        ---
        sol[i][j][k] := orig_u6[i][j][k] * C[1] + temp6;
      }
    }
  }

  ---
  // Handle boundary conditions by filling with original values
  for (let j = 0..32) unroll ::UR_I_LOOP2:: {
    for (let k = 0..16) unroll ::UR_I_LOOP3:: {
      soli[0][j][k] := origi[0][j][k];
      ---
      soli[1][j][k] := origi[1][j][k];
    }
  }

  ---

  for (let i = 0..32) unroll ::UR_J_LOOP1:: {
    for (let k = 0..16) unroll ::UR_J_LOOP3:: {
      solj[0][i][k] := origj[0][i][k];
      ---
      solj[1][i][k] := origj[1][i][k];
    }
  }
  ---
  for (let i = 0..32) unroll ::UR_K_LOOP1:: {
    for (let j = 0..32) unroll ::UR_K_LOOP2:: {
      solk[0][i][j] := origk[0][i][j];
      ---
      solk[1][i][j] := origk[1][i][j];
    }
  }
  ---
  {
    //copy back
    view sol_v = sol[_: bank 1][_: bank 1][_:bank 1];
    for (let i = 1..31) {
      for (let j = 1..31) {
        for (let k = 1..15) {
          sol_interface[i][j][k] := sol_v[i-1][j-1][k-1];
        }
      }
    }
    ---
    view soli_v =   soli  [_: bank 1][_: bank 1][_: bank 1];
    for (let j = 0..32){
      for (let k = 0..16){
        sol_interface[0][j][k] := soli_v[0][j][k];
        ---
        sol_interface[31][j][k] := soli_v[1][j][k];
      }
    }
    ---
    view solj_v =   solj  [_: bank 1][_: bank 1][_: bank 1];
    for (let i = 0..32){
      for (let k = 0..16){
        sol_interface[i][0][k] := solj_v[0][i][k];
        ---
        sol_interface[i][31][k] := solj_v[1][i][k];
      }
    }
    ---
    view solk_v =   solk  [_: bank 1][_: bank 1][_: bank 1];
    for (let i = 0..32){
      for (let j = 0..32){
        sol_interface[i][j][0] := solk_v[0][i][j];
        ---
        sol_interface[i][j][15] := solk_v[1][i][j];
      }
    }
  }
}
