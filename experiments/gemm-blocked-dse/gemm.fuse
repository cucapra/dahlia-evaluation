decl m1_int: bit<32>[128][128];
decl m2_int: bit<32>[128][128];
decl prod_int: bit<32>[128][128];

let m1: bit<32>[128 bank 4][128 bank 8];
let m2: bit<32>[128 bank 8][128 bank 4];
let prod: bit<32>[128 bank 4][128 bank 4];

view m1_sh = m1[_: bank 1][_: bank 1];
view m2_sh = m2[_: bank 1][_: bank 1];
view prod_sh = prod[_: bank 1][_: bank 1];

{
  for (let i = 0..128) {
    for (let j = 0..128) {
      m1_sh[i][j] := m1_int[i][j];
      m2_sh[i][j] := m2_int[i][j];
      prod_sh[i][j] := 0;
    }
  }

  ---

  for (let jj = 0..16) {
    for (let kk = 0..16) {
      view prod_v = prod[_:][8 * jj:];
      view m1_v = m1[_:][8 * kk:];
      view m2_v = m2[8 * kk:][8 * jj:];
      for (let i = 0..128) unroll 4 {
        for (let j = 0..8) unroll 4 {
          for (let k = 0..8) unroll 8 {
            let mul = m1_v[i][k] * m2_v[k][j];
          } combine {
            prod_v[i][j] += mul;
          }
        }
      }
    }
  }

  ---

  for (let i = 0..128) {
    for (let j = 0..128) {
      prod_int[i][j] := prod_sh[i][j];
    }
  }
}
