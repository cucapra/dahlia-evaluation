// ALEN: 10
// BLEN: 128

decl SEQA: bit<8>[10];
decl SEQB: bit<8>[128];
decl alignedA: bit<8>[138];
decl alignedB: bit<8>[138];

decl M: bit<32>[1419];
decl ptr: bit<8>[1419];

let score:bit<32>   = 0;
let up_left:bit<32> = 0;
let up:bit<32>      = 0;
let left:bit<32>    = 0;
let max:bit<32>     = 0;

let row:bit<32>    = 0;
let row_up:bit<32> = 0;
let r:bit<32>      = 0;

let a_str_idx:bit<32> = 0;
let b_str_idx:bit<32> = 0;

let GAP_SCORE   = 1; // FIXME: should be -1
let MATCH_SCORE = 1;
let MISMATCH_SCORE = 1; // FIXME: should be -1
let SKIPB = 5; // FIXME: whatever the ASCII code for '<' is
let SKIPA = 5; // FIXME: whatever the ASCII code for '^' is
let ALIGN = 6; // FIXME: should represent '\\'

let DASH = 7; // FIXME: should represent '-'
let UNDERSCORE = 10; // FIXME: should represent '_'

for (let a_idx = 0..11) {
  M[a_idx] := a_idx * GAP_SCORE;
}

---

for (let b_idx = 0..129) {
  M[b_idx*11] := b_idx; // FIXME: * GAP_SCORE
}

---

for (let b_idx = 1..129) {
  for (let a_idx = 1..11) {
    if (SEQA[a_idx-1] == SEQB[b_idx-1]) {
      score := MATCH_SCORE;
    }
    ---
    if (SEQA[a_idx-1] != SEQB[b_idx-1]) {
    score := MISMATCH_SCORE;
    }

    row_up := (b_idx-1) * 11; // ALEN
    row    := (b_idx) * 11; // ALEN

    up_left := M[row_up + a_idx-1] + score;
    ---
    up      := M[row_up + a_idx  ] + GAP_SCORE;
    ---
    left    := M[row    + a_idx-1] + GAP_SCORE;

    max := left;
    if (up >= left) {
      max := up;
    }
    if (up_left >= up && up_left >= left) {
      max := up_left;
    }

    if (max == left) {
      ptr[row + a_idx] := SKIPB;
    }
    ---
    if (max == up) {
      ptr[row + a_idx] := SKIPA;
    }
    ---
    if (max != left && max != up) {
      ptr[row + a_idx] := ALIGN;
    }
  }
}
---
let a_idx = 10; // ALEN
let b_idx = 128; // BLEN

while (a_idx>0 || b_idx>0) {
  r := b_idx * 11;

  a_str_idx := a_str_idx + 1;
  b_str_idx := b_str_idx + 1;

  if (ptr[r + a_idx] == ALIGN) {
    alignedA[a_str_idx] := SEQA[a_idx-1];
    alignedB[b_str_idx] := SEQB[b_idx-1];
    a_idx := a_idx - 1;
    b_idx := b_idx - 1;
  }
  ---
  if (ptr[r + a_idx] == SKIPB) {
    alignedA[a_str_idx] := SEQA[a_idx-1];
    alignedB[b_str_idx] := DASH;
    a_idx := a_idx - 1;
  }
  ---
  if (ptr[r + a_idx] == SKIPA) {
    alignedA[a_str_idx] := DASH;
    alignedB[b_str_idx] := SEQB[b_idx-1];
    b_idx := b_idx - 1;
  }
  ---
  while (a_str_idx < 138) {
    alignedA[a_str_idx] := UNDERSCORE;
    a_str_idx := a_str_idx + 1;
  }

  while (a_str_idx < 138) {
    alignedB[b_str_idx] := UNDERSCORE;
    b_str_idx := b_str_idx + 1;
  }

}

