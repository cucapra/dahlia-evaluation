def local_scan(bucket: bit<32>[2048]) {
  let bucket_idx: bit<32> = 0;
  let bucket_tmp1: bit<32> = 0;
  let bucket_tmp2: bit<32> = 0;
  for (let radix_id = 0..128) {
    for (let i = 1..16) {
      bucket_idx := radix_id * 16 + i;
      bucket_tmp1 := bucket[bucket_idx - 1];
      ---
      bucket_tmp2 := bucket[bucket_idx];
      ---
      bucket[bucket_idx] := bucket_tmp1 + bucket_tmp2;
    }
  }
}

def sum_scan(sum: bit<32>[128], bucket: bit<32>[2048]) {
  let bucket_idx: bit<32> = 0;
  let sum_tmp: bit<32> = 0;
  sum[0] := 0;
  ---
  for (let radix_id = 1..128) {
    bucket_idx := radix_id * 16 - 1;
    sum_tmp := sum[radix_id - 1];
    ---
    sum[radix_id] := sum_tmp + bucket[bucket_idx];
  }
}

def last_step_scan(bucket: bit<32>[2048], sum: bit<32>[128]) {
  let bucket_idx: bit<32> = 0;
  let bucket_tmp: bit<32> = 0;
  for (let radix_id = 0..128) {
    for (let i = 0..16) {
      bucket_idx := radix_id * 16 + i;
      bucket_tmp := bucket[bucket_idx];
      ---
      bucket[bucket_idx] := bucket_tmp + sum[radix_id];
    }
  }
}

def init(bucket: bit<32>[2048]) {
  for (let i = 0..2048) {
    bucket[i] := 0;
  }
}

def hist(bucket: bit<32>[2048], a: bit<32>[2048], exp: bit<32>) {
  let elem_per_block: bit<32> = 4;
  let bucket_idx: bit<32> = 0;
  let bucket_tmp: bit<32> = 0;
  let a_idx: bit<32> = 0;
  for (let block_id = 0..512) {
    for (let i = 0..4) {
      a_idx := block_id * elem_per_block + i;
      bucket_idx := ((a[a_idx] >> exp) & 0x3) * 512 + block_id + 1;
      bucket_tmp := bucket[bucket_idx];
      ---
      bucket[bucket_idx] := bucket_tmp + 1;
    }
  }
}

def update(b: bit<32>[2048], bucket: bit<32>[2048], a: bit<32>[2048], exp: bit<32>) {

  let bucket_idx: bit<32> = 0;
  let elem_per_block: bit<32> = 4;
  let a_idx: bit<32> = 0;

  let bucket_temp: bit<32> = 0;

  for (let block_id = 0..512) {
    for (let i = 0..4) {
      bucket_idx := ((a[block_id * elem_per_block + i] >> exp) & 0x3) * 512 + block_id;
      ---
      a_idx := block_id * elem_per_block + i;
      ---
      b[bucket[bucket_idx]] := a[a_idx];
      ---
      bucket_temp := bucket[bucket_idx];
      ---
      bucket[bucket_idx] := bucket_temp + 1;
    }
  }
}

decor "#pragma SDS data zero_copy(a[0:SIZE], b[0:SIZE], bucket[0:BUCKETSIZE], sum[0:SCAN_RADIX])"

decl a: bit<32>[2048];
decl b: bit<32>[2048];
decl bucket: bit<32>[2048];
decl sum: bit<32>[128];

let valid_buffer = 0;
let buffer_a = 0;
let buffer_b = 1;
let temp_valid_buffer = 0;

for (let exp = 0..16) {
  init(bucket);
  
  ---
  if (valid_buffer == buffer_a) {
    hist(bucket, a, exp << 1);
  } else {
    hist(bucket, b, exp << 1);
  }
  
  ---
  local_scan(bucket);
  ---
  sum_scan(sum, bucket);
  ---
  last_step_scan(bucket, sum);

  ---
  if (valid_buffer == buffer_a) {
    update(b, bucket, a, exp << 1);
    temp_valid_buffer := buffer_b;
  } else {
    update(a, bucket, b, exp << 1);
    temp_valid_buffer := buffer_a;
  }

  ---
  valid_buffer := temp_valid_buffer;
}
