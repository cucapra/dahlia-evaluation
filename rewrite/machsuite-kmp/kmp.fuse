def cpf(pattern: bit<8>[4], kmp_next: bit<32>[4]) {
  let k: bit<32> = 0;
	kmp_next[0] := 0;
	---
	for (let q = 1..4) {
		let k_val = pattern[k];
		---
		let q_val = pattern[q];
		---
	  while (k > 0 && k_val != q_val) {
		  k := kmp_next[q];
			k_val := pattern[k];
			---
			q_val := pattern[q];
		}
		---
		if (k_val == q_val) {
		  k := k + 1;
		}
		kmp_next[q] := k;
	}
}

decl pattern: bit<8>[4];
decl input: bit<8>[32411];
decl kmp_next: bit<32>[4];
decl n_matches: bit<32>[1];

n_matches[0] := 0;
cpf(pattern, kmp_next);
---
let q:bit<32> = 0;
for (let i = 0..32411) {
  while (q > 0 && pattern[q] != input[i]) {
	  q := kmp_next[q];
	}
	---
	if (pattern[q] == input[i]) {
	  q := q + 1;
	}
	if (q >= 4) {
		let temp:bit<32> = n_matches[0];
		---
	  n_matches[0] := temp + 1;
		q := kmp_next[q - 1];
	}
}
