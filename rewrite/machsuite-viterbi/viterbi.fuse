// N_OBS: 32
// N_STATES: 5
// N_TOKENS 9

decl obs: bit<8>[32];
decl init: bit<8>[5]; // Make this float
decl transition: bit<8>[25]; // Make this float
decl emission: bit<8>[45]; // Make this float
decl path: bit<8>[32];

let llike: bit<8>[32][5];
let min_p: bit<8> = 0;
let p: bit<8> = 0;
let min_s: bit<8> = 0;

for (let s = 1..5) {
  llike[0][s] := init[s] + emission[s*9+obs[0]];
}
---
for (let t = 1..32) {
  for (let curr = 0..5) {
    for (let prev = 0..5) {
		  if (prev == 0) {
        min_p := llike[t-1][prev] + transition[prev*5+curr] + emission[curr*9+obs[t]];
			}
			---
			if (prev != 0) {
        p := llike[t-1][prev] + transition[prev*5+curr] + emission[curr*9+obs[t]];
        if (p < min_p) {
           min_p := p;
        }
			}
    }
		---
    llike[t][curr] := min_p;
  }
}
---
min_p := llike[31][min_s];
---
for (let s = 1..5) {
  p := llike[31][s];
  if (p < min_p) {
    min_p := p;
    min_s := s;
  }
}
path[31] := min_s;
---
let t = 30;
while (t >= 0) {
  min_s := 0;
  min_p := llike[t][min_s] + transition[min_s*5+path[t+1]];
	---
  for (let s = 0..5) {
    p := llike[t][s] + transition[s*5+path[t+1]];
    if (p < min_p) {
      min_p := p;
      min_s := s;
    }
  }
	---
  path[t] := min_s;
}
