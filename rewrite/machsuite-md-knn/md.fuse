decl force_x: double[256];
decl force_y: double[256];
decl force_z: double[256];
decl position_x: double[256];
decl position_y: double[256];
decl position_z: double[256];
decl nl: bit<32>[4096];

let delx:double = 0.0;
let dely:double = 0.0;
let delz:double = 0.0;
let r2inv:double = 0.0;

let r6inv:double = 0.0;
let potential:double = 0.0;
let force:double = 0.0;

let jx:double = 0.0;
let jy:double = 0.0;
let jz:double = 0.0;

let ix:double = 0.0;
let iy:double = 0.0;
let iz:double = 0.0;

let fx:double = 0.0;
let fy:double = 0.0;
let fz:double = 0.0;

let j_idx:bit<32> = 0;

let lj1:double = 1.5;
let lj2:double = 2.0;

for (let i = 0..256) {
  ix := position_x[i];
  ---
  iy := position_y[i];
  ---
  iz := position_z[i];
  ---

  fx := 0.0;
  fy := 0.0;
  fz := 0.0;

  for (let j = 0..16) {
    j_idx := nl[i * 16 + j];

    jx := position_x[j_idx];
    ---
    jy := position_y[j_idx];
    ---
    jz := position_z[j_idx];
    ---

    delx := ix - jx;
    dely := iy - jy;
    delz := iz - jz;

    r2inv := 1.0 / (delx * delx + dely * dely + delz * delz);
    r6inv := r2inv * r2inv * r2inv;
    potential := r6inv * (lj1 * r6inv - lj2);

    force := r2inv * potential;
    fx := fx + delx * force;
    fy := fy + dely * force;
    fz := fz + delz * force;
  }

  force_x[i] := fx;
  force_y[i] := fy;
  force_z[i] := fz;
}
