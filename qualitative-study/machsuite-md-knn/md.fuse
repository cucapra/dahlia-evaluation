decl force_x_interface: double[256];
decl force_y_interface: double[256];
decl force_z_interface: double[256];
decl position_x_interface: double[256];
decl position_y_interface: double[256];
decl position_z_interface: double[256];
decl nl_interface: bit<32>[256][16];


let force_x: double{2}[256 bank ::FORCE::];
let force_y: double{2}[256 bank ::FORCE::];
let force_z: double{2}[256 bank ::FORCE::];
let position_x: double{2}[256 bank ::POS::];
let position_y: double{2}[256 bank ::POS::];
let position_z: double{2}[256 bank ::POS::];
let nl: bit<32>{2}[256][16];
//jx, jy, jz to store position_*[nl[i][j]]
let jx: double{2}[256 bank ::J_D1::][16 bank ::J_D2::];
let jy: double{2}[256 bank ::J_D1::][16 bank ::J_D2::];
let jz: double{2}[256 bank ::J_D1::][16 bank ::J_D2::];


view force_x_v = force_x[_: bank 1];
view force_y_v = force_y[_: bank 1];
view force_z_v = force_z[_: bank 1];
view position_x_v = position_x[_: bank 1];
view position_y_v = position_y[_: bank 1];
view position_z_v = position_z[_: bank 1];
view nl_v = nl[_: bank 1][_: bank 1];
view jx_v = jx[_: bank 1][_: bank 1];
view jy_v = jy[_: bank 1][_: bank 1];
view jz_v = jz[_: bank 1][_: bank 1];

{
  // Copy loop
  for (let i = 0..256) {
    position_x_v[i] := position_x_interface[i];
    position_y_v[i] := position_y_interface[i];
    position_z_v[i] := position_z_interface[i];
    for (let j = 0..16) {
      nl_v[i][j] := nl_interface[i][j];
    }
  }
  ---
  // Data dependent pre fetch loop
  for (let i = 0..256) {
    for (let j = 0..16) {
      let j_idx = nl[i][j];
      jx_v[i][j] := position_x_v[j_idx];
      jy_v[i][j] := position_y_v[j_idx];
      jz_v[i][j] := position_z_v[j_idx];
    }
  }
  ---
  view force_x_sh =    force_x[_: bank ::F_SH::];
  view force_y_sh =    force_y[_: bank ::F_SH::];
  view force_z_sh =    force_z[_: bank ::F_SH::];
  view position_x_sh = position_x[_: bank ::P_SH::];
  view position_y_sh = position_y[_: bank ::P_SH::];
  view position_z_sh = position_z[_: bank ::P_SH::];
  view jx_sh = jx[_: bank ::J_SH1::][_: bank ::J_SH2::];
  view jy_sh = jy[_: bank ::J_SH1::][_: bank ::J_SH2::];
  view jz_sh = jz[_: bank ::J_SH1::][_: bank ::J_SH2::];

  let lj1: double = 1.5;
  let lj2: double = 2.0;

  for (let i = 0..256) unroll ::UR_LOOP1:: {
    let ix = position_x_sh[i];
    let iy = position_y_sh[i];
    let iz = position_z_sh[i];

    ---

    let fx: double = 0.0;
    let fy: double = 0.0;
    let fz: double = 0.0;

    for (let j = 0..16) unroll ::UR_LOOP2:: {
      let delx = ix - jx_sh[i][j];
      let dely = iy - jy_sh[i][j];
      let delz = iz - jz_sh[i][j];

      let r2inv = 1.0 / (delx * delx + dely * dely + delz * delz);
      let r6inv = r2inv * r2inv * r2inv;
      let potential = r6inv * (lj1 * r6inv - lj2);

      let force = r2inv * potential;
    } combine {
      fx += delx * force;
      fy += dely * force;
      fz += delz * force;
    }

    force_x_sh[i] := fx;
    force_y_sh[i] := fy;
    force_z_sh[i] := fz;
  }
  ---
  // Writeback loop
  for (let i = 0..256) {
    force_x_interface[i] := force_x_v[i];
    force_y_interface[i] := force_y_v[i];
    force_z_interface[i] := force_z_v[i];
  }
}
