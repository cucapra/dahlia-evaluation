// BEGIN macro definitions

define(M, 8)
define(N, 12)
define(DATATYPE, float)

// END macro definitions

import "math.h" {
  def extern sqrt(x: DATATYPE);
}

decl A: DATATYPE[M][N];
decl R: DATATYPE[N][N];
decl Q: DATATYPE[M][N];

for (let k = 0..N) {
  let nrm = 0.0;

  for (let i = 0..M) {
    let A_i_k = A[i][k];
    ---
    nrm := nrm + A_i_k * A_i_k;
  }

  // This is a dumb hack we have to since Fuse assumes all functions return
  // void.
  R[k][k] := (sqrt(nrm) as DATATYPE);
  ---
  for (let i = 0..M) {
    Q[i][k] := A[i][k] / R[k][k];
  }
  ---
  let j: bit<32> = k + 1;
  while (j < N) {
    R[k][j] := 0.0;
    ---
    for (let i = 0..M) {
      let v = Q[i][k] * A[i][j];
    } combine {
      R[k][j] += v;
    }
    ---
    for (let i = 0..M) {
      let A_i_j = A[i][j];
      ---
      A[i][j] := A_i_j - Q[i][k] * R[k][j];
    }
    // Update loop counter
    j := j + 1;
  }
}
