// BEGIN macro definitions

define(N, 8)
define(N_1, decr(N)) // Define N-1
define(DATATYPE, float)
define(TSTEPS, 20)

// END macro definitions

decl u: DATATYPE[N][N];
decl v: DATATYPE[N][N];
decl p: DATATYPE[N][N];
decl q: DATATYPE[N][N];

let DX = 1.0 / (N as DATATYPE);
let DY = 1.0 / (N as DATATYPE);
let DT = 1.0 / (TSTEPS as DATATYPE);
let B1 = 2.0;
let B2 = 1.0;
let mul1 = B1 * DT / (DX * DX);
let mul2 = B2 * DT / (DY * DY);

let a = (0.0 - mul1) / 2.0;
let b = 1.0 + mul1;
let c = a;
let d = (0.0 - mul2) / 2.0;
let e = 1.0 + mul2;
let f = d;

for (let t = 1..TSTEPS) {
  //Column Sweep
  for (let i = 1..N_1) {
    v[0][i] := 1.0;
    p[i][0] := 0.0;
    ---
    q[i][0] := v[0][i];
    ---
    for (let j = 1..N_1) {
      let p_i_j_1 = p[i][j-1];
      ---
      p[i][j] := (0.0 - c) / (a * p_i_j_1 + b);
      ---
      // NOTE(rachit): Looks like rotation view pattern on u[j][i]
      let u_j_i = u[j][i];
      ---
      let u_j_i_1 = u[j][i-1];
      let q_i_j_1 = q[i][j-1];
      ---
      q[i][j] :=
        ((0.0 - d) * u_j_i_1 + (1.0 + 2.0 * d) * u_j_i
          - f * u[j][i+1] - a * q_i_j_1)/(a * p[i][j-1] + b);
    }

    v[N_1][i] := 1.0;
    let j = N - 2;
    ---
    while (j >= 1) {
      let v_j_1_i = v[j+1][i];
      ---
      v[j][i] := p[i][j] * v_j_1_i + q[i][j];

      // Update loop counter
      j := j - 1;
    }
  }
  ---
  //Row Sweep
  for (let i = 1..N_1) {
    u[i][0] := 1.0;
    p[i][0] := 0.0;
    ---
    q[i][0] := u[i][0];
    ---
    for (let j = 1..N_1) {
      let p_i_j_1 = p[i][j-1];
      ---
      p[i][j] := (0.0 - f) / (d * p_i_j_1 + e);
      let v_i_1_j = v[i-1][j];
      ---
      let v_i_j = v[i][j];
      let q_i_j_1 = q[i][j-1]
      ---
      q[i][j] :=
        ((0.0 - a) * v_i_1_j + (1.0 + 2.0 * a) * v_i_j
         - c * v[i+1][j] - d * q_i_j_1)/(d * p[i][j-1] + e);
    }

    u[i][N-1] := 1.0;
    ---
    let j = N-2;
    while (j >= 1) {
      let u_i_j_1 = u[i][j+1];
      ---
      u[i][j] := p[i][j] * u_i_j_1 + q[i][j];
      // Update loop counter
      j := j - 1;
    }
  }
}
