// BEGIN macro definitions

define(N, 8)
define(DATATYPE, float)

// END macro definitions

decl alpha: DATATYPE;
decl beta: DATATYPE;
decl A: DATATYPE[N][N];
decl u1: DATATYPE[N];
decl v1: DATATYPE[N];
decl u2: DATATYPE[N];
decl v2: DATATYPE[N];
decl w: DATATYPE[N];
decl x: DATATYPE[N];
decl y: DATATYPE[N];
decl z: DATATYPE[N];


for (let i = 0..N) {
  for (let j = 0..N) {
    let A_i_j = A[i][j];
    ---
    A[i][j] := A_i_j + u1[i] * v1[j] + u2[i] * v2[j];
  }
}
---
for (let i = 0..N) {
  for (let j = 0..N) {
    let x_i = x[i];
    ---
    x[i] := x_i + beta * A[j][i] * y[j];
  }
}
---
// We could've moved this up and parallelized with loop1.
for (let i = 0..N) {
  let x_i = x[i];
  ---
  x[i] := x_i + z[i];
}
---
for (let i = 0..N) {
  for (let j = 0..N) {
    let w_i = w[i];
    ---
    w[i] := w_i +  alpha * A[i][j] * x[j];
  }
}
